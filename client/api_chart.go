
/*
 * Forecast.Solar
 *
 * ## Restful API for Solar production forecast data and Weather forecast data. ### Retrieve data based on a location, the declination and orientation of solar panels.  #### <a href='https://forecast.solar'>Homepage</a> &bull; <a href='https://doc.forecast.solar'>Documentation</a>  <small>made by <a href='https://knutkohl.consulting'>Knut Kohl . Consulting</a></small> 
 *
 * API version: v5.69.0.1072
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package client

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"fmt"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type ChartApiService service

/*
ChartApiService Build chart token for one solar plane
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param apikey Your personal API key
 * @param lat Latitude of location
 * @param lon Longitude of location
 * @param dec1 1st solar plane declination, 0 &#x3D; horizontal, 90 &#x3D; vertical
 * @param az1 1st solar plane azimuth, West &#x3D; 90, South &#x3D; 0, East &#x3D; -90
 * @param kwp1 1st solar plane max. peak power in kilo watt
 * @param optional nil or *ChartApiChart1GetOpts - Optional Parameters:
     * @param "XDelimiter" (optional.String) -  Dataset delimiter in CSV response, default &#39;|&#39;
     * @param "XSeparator" (optional.String) -  Value separator in CSV response, default &#39;;&#39;, for a tabulator use string &#39;TAB&#39;

@return ResponseBuildChartToken
*/

type ChartApiChart1GetOpts struct { 
	XDelimiter optional.String
	XSeparator optional.String
}

func (a *ChartApiService) Chart1Get(ctx context.Context, apikey string, lat float32, lon float32, dec1 float32, az1 float32, kwp1 float32, localVarOptionals *ChartApiChart1GetOpts) (ResponseBuildChartToken, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ResponseBuildChartToken
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/{apikey}/chart/{lat}/{lon}/{dec1}/{az1}/{kwp1}"
	localVarPath = strings.Replace(localVarPath, "{"+"apikey"+"}", fmt.Sprintf("%v", apikey), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"lat"+"}", fmt.Sprintf("%v", lat), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"lon"+"}", fmt.Sprintf("%v", lon), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"dec1"+"}", fmt.Sprintf("%v", dec1), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"az1"+"}", fmt.Sprintf("%v", az1), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"kwp1"+"}", fmt.Sprintf("%v", kwp1), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if lat < -90 {
		return localVarReturnValue, nil, reportError("lat must be greater than -90")
	}
	if lat > 90 {
		return localVarReturnValue, nil, reportError("lat must be less than 90")
	}
	if lon < -180 {
		return localVarReturnValue, nil, reportError("lon must be greater than -180")
	}
	if lon > 180 {
		return localVarReturnValue, nil, reportError("lon must be less than 180")
	}
	if dec1 < 0 {
		return localVarReturnValue, nil, reportError("dec1 must be greater than 0")
	}
	if dec1 > 90 {
		return localVarReturnValue, nil, reportError("dec1 must be less than 90")
	}
	if az1 < -180 {
		return localVarReturnValue, nil, reportError("az1 must be greater than -180")
	}
	if az1 > 180 {
		return localVarReturnValue, nil, reportError("az1 must be less than 180")
	}
	if kwp1 < 0 {
		return localVarReturnValue, nil, reportError("kwp1 must be greater than 0")
	}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "text/csv", "application/xml", "text/plain"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.XDelimiter.IsSet() {
		localVarHeaderParams["X-Delimiter"] = parameterToString(localVarOptionals.XDelimiter.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.XSeparator.IsSet() {
		localVarHeaderParams["X-Separator"] = parameterToString(localVarOptionals.XSeparator.Value(), "")
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v ResponseBuildChartToken
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v ResponseFailure
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 404 {
			var v ResponseFailure
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
ChartApiService Build chart token combined for two solar planes
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param apikey Your personal API key
 * @param lat Latitude of location
 * @param lon Longitude of location
 * @param dec1 1st solar plane declination, 0 &#x3D; horizontal, 90 &#x3D; vertical
 * @param az1 1st solar plane azimuth, West &#x3D; 90, South &#x3D; 0, East &#x3D; -90
 * @param kwp1 1st solar plane max. peak power in kilo watt
 * @param dec2 2nd solar plane declination, 0 &#x3D; horizontal, 90 &#x3D; vertical
 * @param az2 2nd solar plane azimuth, West &#x3D; 90, South &#x3D; 0, East &#x3D; -90
 * @param kwp2 2nd solar p√ºlane max. peak power in kilo watt
 * @param optional nil or *ChartApiChart2GetOpts - Optional Parameters:
     * @param "XDelimiter" (optional.String) -  Dataset delimiter in CSV response, default &#39;|&#39;
     * @param "XSeparator" (optional.String) -  Value separator in CSV response, default &#39;;&#39;, for a tabulator use string &#39;TAB&#39;

@return ResponseBuildChartToken
*/

type ChartApiChart2GetOpts struct { 
	XDelimiter optional.String
	XSeparator optional.String
}

func (a *ChartApiService) Chart2Get(ctx context.Context, apikey string, lat float32, lon float32, dec1 float32, az1 float32, kwp1 float32, dec2 float32, az2 float32, kwp2 float32, localVarOptionals *ChartApiChart2GetOpts) (ResponseBuildChartToken, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ResponseBuildChartToken
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/{apikey}/chart/{lat}/{lon}/{dec1}/{az1}/{kwp1}/{dec2}/{az2}/{kwp2}"
	localVarPath = strings.Replace(localVarPath, "{"+"apikey"+"}", fmt.Sprintf("%v", apikey), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"lat"+"}", fmt.Sprintf("%v", lat), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"lon"+"}", fmt.Sprintf("%v", lon), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"dec1"+"}", fmt.Sprintf("%v", dec1), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"az1"+"}", fmt.Sprintf("%v", az1), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"kwp1"+"}", fmt.Sprintf("%v", kwp1), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"dec2"+"}", fmt.Sprintf("%v", dec2), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"az2"+"}", fmt.Sprintf("%v", az2), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"kwp2"+"}", fmt.Sprintf("%v", kwp2), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if lat < -90 {
		return localVarReturnValue, nil, reportError("lat must be greater than -90")
	}
	if lat > 90 {
		return localVarReturnValue, nil, reportError("lat must be less than 90")
	}
	if lon < -180 {
		return localVarReturnValue, nil, reportError("lon must be greater than -180")
	}
	if lon > 180 {
		return localVarReturnValue, nil, reportError("lon must be less than 180")
	}
	if dec1 < 0 {
		return localVarReturnValue, nil, reportError("dec1 must be greater than 0")
	}
	if dec1 > 90 {
		return localVarReturnValue, nil, reportError("dec1 must be less than 90")
	}
	if az1 < -180 {
		return localVarReturnValue, nil, reportError("az1 must be greater than -180")
	}
	if az1 > 180 {
		return localVarReturnValue, nil, reportError("az1 must be less than 180")
	}
	if kwp1 < 0 {
		return localVarReturnValue, nil, reportError("kwp1 must be greater than 0")
	}
	if dec2 < 0 {
		return localVarReturnValue, nil, reportError("dec2 must be greater than 0")
	}
	if dec2 > 90 {
		return localVarReturnValue, nil, reportError("dec2 must be less than 90")
	}
	if az2 < -180 {
		return localVarReturnValue, nil, reportError("az2 must be greater than -180")
	}
	if az2 > 180 {
		return localVarReturnValue, nil, reportError("az2 must be less than 180")
	}
	if kwp2 < 0 {
		return localVarReturnValue, nil, reportError("kwp2 must be greater than 0")
	}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "text/csv", "application/xml", "text/plain"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.XDelimiter.IsSet() {
		localVarHeaderParams["X-Delimiter"] = parameterToString(localVarOptionals.XDelimiter.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.XSeparator.IsSet() {
		localVarHeaderParams["X-Separator"] = parameterToString(localVarOptionals.XSeparator.Value(), "")
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v ResponseBuildChartToken
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v ResponseFailure
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 404 {
			var v ResponseFailure
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
ChartApiService Build chart token combined for three solar planes
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param apikey Your personal API key
 * @param lat Latitude of location
 * @param lon Longitude of location
 * @param dec1 1st solar plane declination, 0 &#x3D; horizontal, 90 &#x3D; vertical
 * @param az1 1st solar plane azimuth, West &#x3D; 90, South &#x3D; 0, East &#x3D; -90
 * @param kwp1 1st solar plane max. peak power in kilo watt
 * @param dec2 2nd solar plane declination, 0 &#x3D; horizontal, 90 &#x3D; vertical
 * @param az2 2nd solar plane azimuth, West &#x3D; 90, South &#x3D; 0, East &#x3D; -90
 * @param kwp2 2nd solar p√ºlane max. peak power in kilo watt
 * @param dec3 3rd solar plane declination, 0 &#x3D; horizontal, 90 &#x3D; vertical
 * @param az3 3rd solar plane azimuth, West &#x3D; 90, South &#x3D; 0, East &#x3D; -90
 * @param kwp3 3rd solar plane max. peak power in kilo watt peak
 * @param optional nil or *ChartApiChart3GetOpts - Optional Parameters:
     * @param "XDelimiter" (optional.String) -  Dataset delimiter in CSV response, default &#39;|&#39;
     * @param "XSeparator" (optional.String) -  Value separator in CSV response, default &#39;;&#39;, for a tabulator use string &#39;TAB&#39;

@return ResponseBuildChartToken
*/

type ChartApiChart3GetOpts struct { 
	XDelimiter optional.String
	XSeparator optional.String
}

func (a *ChartApiService) Chart3Get(ctx context.Context, apikey string, lat float32, lon float32, dec1 float32, az1 float32, kwp1 float32, dec2 float32, az2 float32, kwp2 float32, dec3 float32, az3 float32, kwp3 float32, localVarOptionals *ChartApiChart3GetOpts) (ResponseBuildChartToken, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ResponseBuildChartToken
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/{apikey}/chart/{lat}/{lon}/{dec1}/{az1}/{kwp1}/{dec2}/{az2}/{kwp2}/{dec3}/{az3}/{kwp3}"
	localVarPath = strings.Replace(localVarPath, "{"+"apikey"+"}", fmt.Sprintf("%v", apikey), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"lat"+"}", fmt.Sprintf("%v", lat), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"lon"+"}", fmt.Sprintf("%v", lon), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"dec1"+"}", fmt.Sprintf("%v", dec1), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"az1"+"}", fmt.Sprintf("%v", az1), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"kwp1"+"}", fmt.Sprintf("%v", kwp1), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"dec2"+"}", fmt.Sprintf("%v", dec2), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"az2"+"}", fmt.Sprintf("%v", az2), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"kwp2"+"}", fmt.Sprintf("%v", kwp2), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"dec3"+"}", fmt.Sprintf("%v", dec3), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"az3"+"}", fmt.Sprintf("%v", az3), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"kwp3"+"}", fmt.Sprintf("%v", kwp3), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if lat < -90 {
		return localVarReturnValue, nil, reportError("lat must be greater than -90")
	}
	if lat > 90 {
		return localVarReturnValue, nil, reportError("lat must be less than 90")
	}
	if lon < -180 {
		return localVarReturnValue, nil, reportError("lon must be greater than -180")
	}
	if lon > 180 {
		return localVarReturnValue, nil, reportError("lon must be less than 180")
	}
	if dec1 < 0 {
		return localVarReturnValue, nil, reportError("dec1 must be greater than 0")
	}
	if dec1 > 90 {
		return localVarReturnValue, nil, reportError("dec1 must be less than 90")
	}
	if az1 < -180 {
		return localVarReturnValue, nil, reportError("az1 must be greater than -180")
	}
	if az1 > 180 {
		return localVarReturnValue, nil, reportError("az1 must be less than 180")
	}
	if kwp1 < 0 {
		return localVarReturnValue, nil, reportError("kwp1 must be greater than 0")
	}
	if dec2 < 0 {
		return localVarReturnValue, nil, reportError("dec2 must be greater than 0")
	}
	if dec2 > 90 {
		return localVarReturnValue, nil, reportError("dec2 must be less than 90")
	}
	if az2 < -180 {
		return localVarReturnValue, nil, reportError("az2 must be greater than -180")
	}
	if az2 > 180 {
		return localVarReturnValue, nil, reportError("az2 must be less than 180")
	}
	if kwp2 < 0 {
		return localVarReturnValue, nil, reportError("kwp2 must be greater than 0")
	}
	if dec3 < 0 {
		return localVarReturnValue, nil, reportError("dec3 must be greater than 0")
	}
	if dec3 > 90 {
		return localVarReturnValue, nil, reportError("dec3 must be less than 90")
	}
	if az3 < -180 {
		return localVarReturnValue, nil, reportError("az3 must be greater than -180")
	}
	if az3 > 180 {
		return localVarReturnValue, nil, reportError("az3 must be less than 180")
	}
	if kwp3 < 0 {
		return localVarReturnValue, nil, reportError("kwp3 must be greater than 0")
	}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "text/csv", "application/xml", "text/plain"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.XDelimiter.IsSet() {
		localVarHeaderParams["X-Delimiter"] = parameterToString(localVarOptionals.XDelimiter.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.XSeparator.IsSet() {
		localVarHeaderParams["X-Separator"] = parameterToString(localVarOptionals.XSeparator.Value(), "")
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v ResponseBuildChartToken
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v ResponseFailure
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 404 {
			var v ResponseFailure
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
ChartApiService Script to render theoretic clear sky chart for a day in advance
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param day Show days in advance: 0 &#x3D; today (default), max. 6
 * @param token Token generated by the /{apikey}/chart/{lat}/{lon}/... functions


*/
func (a *ChartApiService) ChartClearskyDayTokenJsGet(ctx context.Context, day float32, token string) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/chart/clearsky/{day}/{token}.js"
	localVarPath = strings.Replace(localVarPath, "{"+"day"+"}", fmt.Sprintf("%v", day), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"token"+"}", fmt.Sprintf("%v", token), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if day < 0 {
		return nil, reportError("day must be greater than 0")
	}
	if day > 6 {
		return nil, reportError("day must be less than 6")
	}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/javascript"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}


	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}

/*
ChartApiService Script to render today theoretic clear sky chart
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param token Token generated by the /{apikey}/chart/{lat}/{lon}/... functions


*/
func (a *ChartApiService) ChartClearskyTokenJsGet(ctx context.Context, token string) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/chart/clearsky/{token}.js"
	localVarPath = strings.Replace(localVarPath, "{"+"token"+"}", fmt.Sprintf("%v", token), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/javascript"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}


	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}

/*
ChartApiService Script to render estimate chart for a day in advance
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param day Show days in advance: 0 &#x3D; today (default), max. 6
 * @param token Token generated by the /{apikey}/chart/{lat}/{lon}/... functions


*/
func (a *ChartApiService) ChartDayTokenJsGet(ctx context.Context, day float32, token string) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/chart/{day}/{token}.js"
	localVarPath = strings.Replace(localVarPath, "{"+"day"+"}", fmt.Sprintf("%v", day), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"token"+"}", fmt.Sprintf("%v", token), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if day < 0 {
		return nil, reportError("day must be greater than 0")
	}
	if day > 6 {
		return nil, reportError("day must be less than 6")
	}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/javascript"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}


	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}

/*
ChartApiService Script to render historic average chart for a day in advance
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param day Show days in advance: 0 &#x3D; today (default), max. 6
 * @param token Token generated by the /{apikey}/chart/{lat}/{lon}/... functions


*/
func (a *ChartApiService) ChartHistoryDayTokenJsGet(ctx context.Context, day float32, token string) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/chart/history/{day}/{token}.js"
	localVarPath = strings.Replace(localVarPath, "{"+"day"+"}", fmt.Sprintf("%v", day), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"token"+"}", fmt.Sprintf("%v", token), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if day < 0 {
		return nil, reportError("day must be greater than 0")
	}
	if day > 6 {
		return nil, reportError("day must be less than 6")
	}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/javascript"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}


	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}

/*
ChartApiService Script to render today historic average chart
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param token Token generated by the /{apikey}/chart/{lat}/{lon}/... functions


*/
func (a *ChartApiService) ChartHistoryTokenJsGet(ctx context.Context, token string) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/chart/history/{token}.js"
	localVarPath = strings.Replace(localVarPath, "{"+"token"+"}", fmt.Sprintf("%v", token), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/javascript"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}


	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}

/*
ChartApiService Initialization script for charts
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().


*/
func (a *ChartApiService) ChartInitJsGet(ctx context.Context) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/chart/init.js"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/javascript"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}


	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}

/*
ChartApiService Script to render today estimate chart
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param token Token generated by the /{apikey}/chart/{lat}/{lon}/... functions


*/
func (a *ChartApiService) ChartTokenJsGet(ctx context.Context, token string) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/chart/{token}.js"
	localVarPath = strings.Replace(localVarPath, "{"+"token"+"}", fmt.Sprintf("%v", token), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/javascript"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}


	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}

/*
ChartApiService List all charts for given API key
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param apikey Your personal API key

@return ResponseCharts
*/
func (a *ChartApiService) ChartsGet(ctx context.Context, apikey string) (ResponseCharts, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ResponseCharts
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/{apikey}/charts"
	localVarPath = strings.Replace(localVarPath, "{"+"apikey"+"}", fmt.Sprintf("%v", apikey), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "text/csv", "application/xml", "text/plain"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v ResponseCharts
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v ResponseFailure
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 404 {
			var v ResponseFailure
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

