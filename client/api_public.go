/*
 * Forecast.Solar
 *
 * ## Restful API for Solar production forecast data and Weather forecast data. ### Retrieve data based on a location, the declination and orientation of solar panels.  #### <a href='https://forecast.solar'>Homepage</a> &bull; <a href='https://doc.forecast.solar'>Documentation</a>  <small>made by <a href='https://knutkohl.consulting'>Knut Kohl . Consulting</a></small>
 *
 * API version: v5.69.0.1072
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package client

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type PublicApiService service

/*
PublicApiService
Get estimated watts, watt hours and watt hours per day
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param lat Latitude of location
 * @param lon Longitude of location
 * @param dec Solar plane declination, 0 &#x3D; horizontal, 90 &#x3D; vertical
 * @param az Solar plane azimuth, West &#x3D; 90, South &#x3D; 0, East &#x3D; -90
 * @param kwp Solar plane max. peak power in kilo watt
 * @param optional nil or *PublicApiEstimateLatLonDecAzKwpGetOpts - Optional Parameters:
     * @param "Time" (optional.String) -  Set to &#39;utc&#39; to return timestamps in ISO 8601, e.g. 2004-02-12T15:19:21+00:00
     * @param "XDelimiter" (optional.String) -  Dataset delimiter in CSV response, default &#39;|&#39;
     * @param "XSeparator" (optional.String) -  Value separator in CSV response, default &#39;;&#39;, for a tabulator use string &#39;TAB&#39;

@return ResponseFull
*/

type PublicApiEstimateLatLonDecAzKwpGetOpts struct {
	Time       optional.String
	XDelimiter optional.String
	XSeparator optional.String
}

func (a *PublicApiService) EstimateLatLonDecAzKwpGet(ctx context.Context, lat float32, lon float32, dec float32, az float32, kwp float32, localVarOptionals *PublicApiEstimateLatLonDecAzKwpGetOpts) (ResponseFull, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue ResponseFull
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/estimate/{lat}/{lon}/{dec}/{az}/{kwp}"
	localVarPath = strings.Replace(localVarPath, "{"+"lat"+"}", fmt.Sprintf("%v", lat), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"lon"+"}", fmt.Sprintf("%v", lon), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"dec"+"}", fmt.Sprintf("%v", dec), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"az"+"}", fmt.Sprintf("%v", az), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"kwp"+"}", fmt.Sprintf("%v", kwp), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if lat < -90 {
		return localVarReturnValue, nil, reportError("lat must be greater than -90")
	}
	if lat > 90 {
		return localVarReturnValue, nil, reportError("lat must be less than 90")
	}
	if lon < -180 {
		return localVarReturnValue, nil, reportError("lon must be greater than -180")
	}
	if lon > 180 {
		return localVarReturnValue, nil, reportError("lon must be less than 180")
	}
	if dec < 0 {
		return localVarReturnValue, nil, reportError("dec must be greater than 0")
	}
	if dec > 90 {
		return localVarReturnValue, nil, reportError("dec must be less than 90")
	}
	if az < -180 {
		return localVarReturnValue, nil, reportError("az must be greater than -180")
	}
	if az > 180 {
		return localVarReturnValue, nil, reportError("az must be less than 180")
	}
	if kwp < 0 {
		return localVarReturnValue, nil, reportError("kwp must be greater than 0")
	}

	if localVarOptionals != nil && localVarOptionals.Time.IsSet() {
		localVarQueryParams.Add("time", parameterToString(localVarOptionals.Time.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "text/csv", "application/xml", "text/plain"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.XDelimiter.IsSet() {
		localVarHeaderParams["X-Delimiter"] = parameterToString(localVarOptionals.XDelimiter.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.XSeparator.IsSet() {
		localVarHeaderParams["X-Separator"] = parameterToString(localVarOptionals.XSeparator.Value(), "")
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v ResponseFull
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ResponseFailure
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 404 {
			var v ResponseFailure
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
PublicApiService
Get estimated watt hours sum per day
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param lat Latitude of location
 * @param lon Longitude of location
 * @param dec Solar plane declination, 0 &#x3D; horizontal, 90 &#x3D; vertical
 * @param az Solar plane azimuth, West &#x3D; 90, South &#x3D; 0, East &#x3D; -90
 * @param kwp Solar plane max. peak power in kilo watt
 * @param optional nil or *PublicApiEstimateWatthoursDayLatLonDecAzKwpGetOpts - Optional Parameters:
     * @param "Time" (optional.String) -  Set to &#39;utc&#39; to return timestamps in ISO 8601, e.g. 2004-02-12T15:19:21+00:00
     * @param "XDelimiter" (optional.String) -  Dataset delimiter in CSV response, default &#39;|&#39;
     * @param "XSeparator" (optional.String) -  Value separator in CSV response, default &#39;;&#39;, for a tabulator use string &#39;TAB&#39;

@return ResponseWattHoursDay
*/

type PublicApiEstimateWatthoursDayLatLonDecAzKwpGetOpts struct {
	Time       optional.String
	XDelimiter optional.String
	XSeparator optional.String
}

func (a *PublicApiService) EstimateWatthoursDayLatLonDecAzKwpGet(ctx context.Context, lat float32, lon float32, dec float32, az float32, kwp float32, localVarOptionals *PublicApiEstimateWatthoursDayLatLonDecAzKwpGetOpts) (ResponseWattHoursDay, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue ResponseWattHoursDay
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/estimate/watthours/day/{lat}/{lon}/{dec}/{az}/{kwp}"
	localVarPath = strings.Replace(localVarPath, "{"+"lat"+"}", fmt.Sprintf("%v", lat), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"lon"+"}", fmt.Sprintf("%v", lon), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"dec"+"}", fmt.Sprintf("%v", dec), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"az"+"}", fmt.Sprintf("%v", az), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"kwp"+"}", fmt.Sprintf("%v", kwp), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if lat < -90 {
		return localVarReturnValue, nil, reportError("lat must be greater than -90")
	}
	if lat > 90 {
		return localVarReturnValue, nil, reportError("lat must be less than 90")
	}
	if lon < -180 {
		return localVarReturnValue, nil, reportError("lon must be greater than -180")
	}
	if lon > 180 {
		return localVarReturnValue, nil, reportError("lon must be less than 180")
	}
	if dec < 0 {
		return localVarReturnValue, nil, reportError("dec must be greater than 0")
	}
	if dec > 90 {
		return localVarReturnValue, nil, reportError("dec must be less than 90")
	}
	if az < -180 {
		return localVarReturnValue, nil, reportError("az must be greater than -180")
	}
	if az > 180 {
		return localVarReturnValue, nil, reportError("az must be less than 180")
	}
	if kwp < 0 {
		return localVarReturnValue, nil, reportError("kwp must be greater than 0")
	}

	if localVarOptionals != nil && localVarOptionals.Time.IsSet() {
		localVarQueryParams.Add("time", parameterToString(localVarOptionals.Time.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "text/csv", "application/xml", "text/plain"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.XDelimiter.IsSet() {
		localVarHeaderParams["X-Delimiter"] = parameterToString(localVarOptionals.XDelimiter.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.XSeparator.IsSet() {
		localVarHeaderParams["X-Separator"] = parameterToString(localVarOptionals.XSeparator.Value(), "")
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v ResponseWattHoursDay
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ResponseFailure
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 404 {
			var v ResponseFailure
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
PublicApiService
Get estimated watt hours data
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param lat Latitude of location
 * @param lon Longitude of location
 * @param dec Solar plane declination, 0 &#x3D; horizontal, 90 &#x3D; vertical
 * @param az Solar plane azimuth, West &#x3D; 90, South &#x3D; 0, East &#x3D; -90
 * @param kwp Solar plane max. peak power in kilo watt
 * @param optional nil or *PublicApiEstimateWatthoursLatLonDecAzKwpGetOpts - Optional Parameters:
     * @param "Time" (optional.String) -  Set to &#39;utc&#39; to return timestamps in ISO 8601, e.g. 2004-02-12T15:19:21+00:00
     * @param "XDelimiter" (optional.String) -  Dataset delimiter in CSV response, default &#39;|&#39;
     * @param "XSeparator" (optional.String) -  Value separator in CSV response, default &#39;;&#39;, for a tabulator use string &#39;TAB&#39;

@return ResponseWattHours
*/

type PublicApiEstimateWatthoursLatLonDecAzKwpGetOpts struct {
	Time       optional.String
	XDelimiter optional.String
	XSeparator optional.String
}

func NewPublicApiEstimateWatthoursLatLonDecAzKwpGetOpts(time string, delimiter string, separator string) PublicApiEstimateWatthoursLatLonDecAzKwpGetOpts {
	opts := PublicApiEstimateWatthoursLatLonDecAzKwpGetOpts{}
	if time != "" {
		opts.Time = optional.NewString(time)
	}
	if delimiter != "" {
		opts.XDelimiter = optional.NewString(delimiter)
	}
	if separator != "" {
		opts.XSeparator = optional.NewString(separator)
	}
	return opts
}

func (a *PublicApiService) EstimateWatthoursLatLonDecAzKwpGet(ctx context.Context, lat float32, lon float32, dec float32, az float32, kwp float32, localVarOptionals *PublicApiEstimateWatthoursLatLonDecAzKwpGetOpts) (ResponseWattHours, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue ResponseWattHours
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/estimate/watthours/{lat}/{lon}/{dec}/{az}/{kwp}"
	localVarPath = strings.Replace(localVarPath, "{"+"lat"+"}", fmt.Sprintf("%v", lat), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"lon"+"}", fmt.Sprintf("%v", lon), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"dec"+"}", fmt.Sprintf("%v", dec), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"az"+"}", fmt.Sprintf("%v", az), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"kwp"+"}", fmt.Sprintf("%v", kwp), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if lat < -90 {
		return localVarReturnValue, nil, reportError("lat must be greater than -90")
	}
	if lat > 90 {
		return localVarReturnValue, nil, reportError("lat must be less than 90")
	}
	if lon < -180 {
		return localVarReturnValue, nil, reportError("lon must be greater than -180")
	}
	if lon > 180 {
		return localVarReturnValue, nil, reportError("lon must be less than 180")
	}
	if dec < 0 {
		return localVarReturnValue, nil, reportError("dec must be greater than 0")
	}
	if dec > 90 {
		return localVarReturnValue, nil, reportError("dec must be less than 90")
	}
	if az < -180 {
		return localVarReturnValue, nil, reportError("az must be greater than -180")
	}
	if az > 180 {
		return localVarReturnValue, nil, reportError("az must be less than 180")
	}
	if kwp < 0 {
		return localVarReturnValue, nil, reportError("kwp must be greater than 0")
	}

	if localVarOptionals != nil && localVarOptionals.Time.IsSet() {
		localVarQueryParams.Add("time", parameterToString(localVarOptionals.Time.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "text/csv", "application/xml", "text/plain"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.XDelimiter.IsSet() {
		localVarHeaderParams["X-Delimiter"] = parameterToString(localVarOptionals.XDelimiter.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.XSeparator.IsSet() {
		localVarHeaderParams["X-Separator"] = parameterToString(localVarOptionals.XSeparator.Value(), "")
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v ResponseWattHours
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ResponseFailure
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 404 {
			var v ResponseFailure
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
PublicApiService
Get estimated watts per day
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param lat Latitude of location
 * @param lon Longitude of location
 * @param dec Solar plane declination, 0 &#x3D; horizontal, 90 &#x3D; vertical
 * @param az Solar plane azimuth, West &#x3D; 90, South &#x3D; 0, East &#x3D; -90
 * @param kwp Solar plane max. peak power in kilo watt
 * @param optional nil or *PublicApiEstimateWattsLatLonDecAzKwpGetOpts - Optional Parameters:
     * @param "Time" (optional.String) -  Set to &#39;utc&#39; to return timestamps in ISO 8601, e.g. 2004-02-12T15:19:21+00:00
     * @param "XDelimiter" (optional.String) -  Dataset delimiter in CSV response, default &#39;|&#39;
     * @param "XSeparator" (optional.String) -  Value separator in CSV response, default &#39;;&#39;, for a tabulator use string &#39;TAB&#39;

@return ResponseWatts
*/

type PublicApiEstimateWattsLatLonDecAzKwpGetOpts struct {
	Time       optional.String
	XDelimiter optional.String
	XSeparator optional.String
}

func (a *PublicApiService) EstimateWattsLatLonDecAzKwpGet(ctx context.Context, lat float32, lon float32, dec float32, az float32, kwp float32, localVarOptionals *PublicApiEstimateWattsLatLonDecAzKwpGetOpts) (ResponseWatts, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue ResponseWatts
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/estimate/watts/{lat}/{lon}/{dec}/{az}/{kwp}"
	localVarPath = strings.Replace(localVarPath, "{"+"lat"+"}", fmt.Sprintf("%v", lat), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"lon"+"}", fmt.Sprintf("%v", lon), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"dec"+"}", fmt.Sprintf("%v", dec), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"az"+"}", fmt.Sprintf("%v", az), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"kwp"+"}", fmt.Sprintf("%v", kwp), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if lat < -90 {
		return localVarReturnValue, nil, reportError("lat must be greater than -90")
	}
	if lat > 90 {
		return localVarReturnValue, nil, reportError("lat must be less than 90")
	}
	if lon < -180 {
		return localVarReturnValue, nil, reportError("lon must be greater than -180")
	}
	if lon > 180 {
		return localVarReturnValue, nil, reportError("lon must be less than 180")
	}
	if dec < 0 {
		return localVarReturnValue, nil, reportError("dec must be greater than 0")
	}
	if dec > 90 {
		return localVarReturnValue, nil, reportError("dec must be less than 90")
	}
	if az < -180 {
		return localVarReturnValue, nil, reportError("az must be greater than -180")
	}
	if az > 180 {
		return localVarReturnValue, nil, reportError("az must be less than 180")
	}
	if kwp < 0 {
		return localVarReturnValue, nil, reportError("kwp must be greater than 0")
	}

	if localVarOptionals != nil && localVarOptionals.Time.IsSet() {
		localVarQueryParams.Add("time", parameterToString(localVarOptionals.Time.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "text/csv", "application/xml", "text/plain"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.XDelimiter.IsSet() {
		localVarHeaderParams["X-Delimiter"] = parameterToString(localVarOptionals.XDelimiter.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.XSeparator.IsSet() {
		localVarHeaderParams["X-Separator"] = parameterToString(localVarOptionals.XSeparator.Value(), "")
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v ResponseWatts
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ResponseFailure
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 404 {
			var v ResponseFailure
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
PublicApiService
Refer to URL to explore the API in Swagger UI
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return string
*/
func (a *PublicApiService) HelpGet(ctx context.Context) (string, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/help"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"text/plain"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
PublicApiService
API documentation in YAML for Swagger UI
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return string
*/
func (a *PublicApiService) SwaggerYamlGet(ctx context.Context) (string, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/swagger.yaml"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/yaml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
